// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/image.proto

package image

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ImageMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageMetadataMultiError, or
// nil if none found.
func (m *ImageMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetWidth(); val <= 0 || val >= 10000 {
		err := ImageMetadataValidationError{
			field:  "Width",
			reason: "value must be inside range (0, 10000)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetHeight(); val <= 0 || val >= 10000 {
		err := ImageMetadataValidationError{
			field:  "Height",
			reason: "value must be inside range (0, 10000)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ImageMetadata_Format_NotInLookup[m.GetFormat()]; ok {
		err := ImageMetadataValidationError{
			field:  "Format",
			reason: "value must not be in list [NOT_SUPPORT]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetSize(); val <= 0 || val >= 10485760 {
		err := ImageMetadataValidationError{
			field:  "Size",
			reason: "value must be inside range (0, 10485760)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ImageMetadata_UploadTime_Pattern.MatchString(m.GetUploadTime()) {
		err := ImageMetadataValidationError{
			field:  "UploadTime",
			reason: "value does not match regex pattern \"^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}Z$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ImageMetadataMultiError(errors)
	}

	return nil
}

// ImageMetadataMultiError is an error wrapping multiple validation errors
// returned by ImageMetadata.ValidateAll() if the designated constraints
// aren't met.
type ImageMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageMetadataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageMetadataMultiError) AllErrors() []error { return m }

// ImageMetadataValidationError is the validation error returned by
// ImageMetadata.Validate if the designated constraints aren't met.
type ImageMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageMetadataValidationError) ErrorName() string { return "ImageMetadataValidationError" }

// Error satisfies the builtin error interface
func (e ImageMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageMetadataValidationError{}

var _ImageMetadata_Format_NotInLookup = map[ImageFormat]struct{}{
	0: {},
}

var _ImageMetadata_UploadTime_Pattern = regexp.MustCompile("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$")

// Validate checks the field values on UploadRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UploadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UploadRequestMultiError, or
// nil if none found.
func (m *UploadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetImages()); l < 1 || l > 10 {
		err := UploadRequestValidationError{
			field:  "Images",
			reason: "value must contain between 1 and 10 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetImages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UploadRequestValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UploadRequestValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UploadRequestValidationError{
					field:  fmt.Sprintf("Images[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UploadRequestMultiError(errors)
	}

	return nil
}

// UploadRequestMultiError is an error wrapping multiple validation errors
// returned by UploadRequest.ValidateAll() if the designated constraints
// aren't met.
type UploadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadRequestMultiError) AllErrors() []error { return m }

// UploadRequestValidationError is the validation error returned by
// UploadRequest.Validate if the designated constraints aren't met.
type UploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadRequestValidationError) ErrorName() string { return "UploadRequestValidationError" }

// Error satisfies the builtin error interface
func (e UploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadRequestValidationError{}

// Validate checks the field values on UploadImage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UploadImage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadImage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UploadImageMultiError, or
// nil if none found.
func (m *UploadImage) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadImage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _UploadImage_ContentType_NotInLookup[m.GetContentType()]; ok {
		err := UploadImageValidationError{
			field:  "ContentType",
			reason: "value must not be in list [NOT_SUPPORT]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetSize(); val <= 0 || val >= 10485760 {
		err := UploadImageValidationError{
			field:  "Size",
			reason: "value must be inside range (0, 10485760)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetWidth(); val <= 0 || val >= 10000 {
		err := UploadImageValidationError{
			field:  "Width",
			reason: "value must be inside range (0, 10000)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetHeight(); val <= 0 || val >= 10000 {
		err := UploadImageValidationError{
			field:  "Height",
			reason: "value must be inside range (0, 10000)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Latitude != nil {

		if m.GetLatitude() != 0 {

			if val := m.GetLatitude(); val < -90 || val > 90 {
				err := UploadImageValidationError{
					field:  "Latitude",
					reason: "value must be inside range [-90, 90]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Longitude != nil {

		if m.GetLongitude() != 0 {

			if val := m.GetLongitude(); val < -180 || val > 180 {
				err := UploadImageValidationError{
					field:  "Longitude",
					reason: "value must be inside range [-180, 180]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return UploadImageMultiError(errors)
	}

	return nil
}

// UploadImageMultiError is an error wrapping multiple validation errors
// returned by UploadImage.ValidateAll() if the designated constraints aren't met.
type UploadImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadImageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadImageMultiError) AllErrors() []error { return m }

// UploadImageValidationError is the validation error returned by
// UploadImage.Validate if the designated constraints aren't met.
type UploadImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadImageValidationError) ErrorName() string { return "UploadImageValidationError" }

// Error satisfies the builtin error interface
func (e UploadImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadImageValidationError{}

var _UploadImage_ContentType_NotInLookup = map[ImageFormat]struct{}{
	0: {},
}

// Validate checks the field values on UploadResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UploadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UploadResponseMultiError,
// or nil if none found.
func (m *UploadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetImages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UploadResponseValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UploadResponseValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UploadResponseValidationError{
					field:  fmt.Sprintf("Images[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UploadResponseMultiError(errors)
	}

	return nil
}

// UploadResponseMultiError is an error wrapping multiple validation errors
// returned by UploadResponse.ValidateAll() if the designated constraints
// aren't met.
type UploadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadResponseMultiError) AllErrors() []error { return m }

// UploadResponseValidationError is the validation error returned by
// UploadResponse.Validate if the designated constraints aren't met.
type UploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadResponseValidationError) ErrorName() string { return "UploadResponseValidationError" }

// Error satisfies the builtin error interface
func (e UploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadResponseValidationError{}

// Validate checks the field values on SignedUrl with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignedUrl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignedUrl with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignedUrlMultiError, or nil
// if none found.
func (m *SignedUrl) ValidateAll() error {
	return m.validate(true)
}

func (m *SignedUrl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetImageId()) < 1 {
		err := SignedUrlValidationError{
			field:  "ImageId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SignedUrl_ImageId_Pattern.MatchString(m.GetImageId()) {
		err := SignedUrlValidationError{
			field:  "ImageId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSignedUrl()) < 1 {
		err := SignedUrlValidationError{
			field:  "SignedUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SignedUrl_SignedUrl_Pattern.MatchString(m.GetSignedUrl()) {
		err := SignedUrlValidationError{
			field:  "SignedUrl",
			reason: "value does not match regex pattern \"^https?://\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SignedUrlMultiError(errors)
	}

	return nil
}

// SignedUrlMultiError is an error wrapping multiple validation errors returned
// by SignedUrl.ValidateAll() if the designated constraints aren't met.
type SignedUrlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignedUrlMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignedUrlMultiError) AllErrors() []error { return m }

// SignedUrlValidationError is the validation error returned by
// SignedUrl.Validate if the designated constraints aren't met.
type SignedUrlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignedUrlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignedUrlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignedUrlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignedUrlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignedUrlValidationError) ErrorName() string { return "SignedUrlValidationError" }

// Error satisfies the builtin error interface
func (e SignedUrlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignedUrl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignedUrlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignedUrlValidationError{}

var _SignedUrl_ImageId_Pattern = regexp.MustCompile("^[a-zA-Z0-9-]+$")

var _SignedUrl_SignedUrl_Pattern = regexp.MustCompile("^https?://")

// Validate checks the field values on StatusRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatusRequestMultiError, or
// nil if none found.
func (m *StatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetImageIds()); l < 1 || l > 10 {
		err := StatusRequestValidationError{
			field:  "ImageIds",
			reason: "value must contain between 1 and 10 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StatusRequestMultiError(errors)
	}

	return nil
}

// StatusRequestMultiError is an error wrapping multiple validation errors
// returned by StatusRequest.ValidateAll() if the designated constraints
// aren't met.
type StatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusRequestMultiError) AllErrors() []error { return m }

// StatusRequestValidationError is the validation error returned by
// StatusRequest.Validate if the designated constraints aren't met.
type StatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusRequestValidationError) ErrorName() string { return "StatusRequestValidationError" }

// Error satisfies the builtin error interface
func (e StatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusRequestValidationError{}

// Validate checks the field values on StatusResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatusResponseMultiError,
// or nil if none found.
func (m *StatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetImages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StatusResponseValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StatusResponseValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StatusResponseValidationError{
					field:  fmt.Sprintf("Images[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StatusResponseMultiError(errors)
	}

	return nil
}

// StatusResponseMultiError is an error wrapping multiple validation errors
// returned by StatusResponse.ValidateAll() if the designated constraints
// aren't met.
type StatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusResponseMultiError) AllErrors() []error { return m }

// StatusResponseValidationError is the validation error returned by
// StatusResponse.Validate if the designated constraints aren't met.
type StatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusResponseValidationError) ErrorName() string { return "StatusResponseValidationError" }

// Error satisfies the builtin error interface
func (e StatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusResponseValidationError{}

// Validate checks the field values on ImageStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageStatusMultiError, or
// nil if none found.
func (m *ImageStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetImageId()) < 1 {
		err := ImageStatusValidationError{
			field:  "ImageId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ImageStatus_ImageId_Pattern.MatchString(m.GetImageId()) {
		err := ImageStatusValidationError{
			field:  "ImageId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMetadata() == nil {
		err := ImageStatusValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImageStatusValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImageStatusValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImageStatusValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetVariants()) < 1 {
		err := ImageStatusValidationError{
			field:  "Variants",
			reason: "value must contain at least 1 pair(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ImageStatusMultiError(errors)
	}

	return nil
}

// ImageStatusMultiError is an error wrapping multiple validation errors
// returned by ImageStatus.ValidateAll() if the designated constraints aren't met.
type ImageStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageStatusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageStatusMultiError) AllErrors() []error { return m }

// ImageStatusValidationError is the validation error returned by
// ImageStatus.Validate if the designated constraints aren't met.
type ImageStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageStatusValidationError) ErrorName() string { return "ImageStatusValidationError" }

// Error satisfies the builtin error interface
func (e ImageStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageStatusValidationError{}

var _ImageStatus_ImageId_Pattern = regexp.MustCompile("^[a-zA-Z0-9-]+$")

// Validate checks the field values on ClearRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClearRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClearRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClearRequestMultiError, or
// nil if none found.
func (m *ClearRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClearRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ClearRequestMultiError(errors)
	}

	return nil
}

// ClearRequestMultiError is an error wrapping multiple validation errors
// returned by ClearRequest.ValidateAll() if the designated constraints aren't met.
type ClearRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClearRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClearRequestMultiError) AllErrors() []error { return m }

// ClearRequestValidationError is the validation error returned by
// ClearRequest.Validate if the designated constraints aren't met.
type ClearRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClearRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClearRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClearRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClearRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClearRequestValidationError) ErrorName() string { return "ClearRequestValidationError" }

// Error satisfies the builtin error interface
func (e ClearRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClearRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClearRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClearRequestValidationError{}

// Validate checks the field values on ClearResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClearResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClearResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClearResponseMultiError, or
// nil if none found.
func (m *ClearResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClearResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return ClearResponseMultiError(errors)
	}

	return nil
}

// ClearResponseMultiError is an error wrapping multiple validation errors
// returned by ClearResponse.ValidateAll() if the designated constraints
// aren't met.
type ClearResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClearResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClearResponseMultiError) AllErrors() []error { return m }

// ClearResponseValidationError is the validation error returned by
// ClearResponse.Validate if the designated constraints aren't met.
type ClearResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClearResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClearResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClearResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClearResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClearResponseValidationError) ErrorName() string { return "ClearResponseValidationError" }

// Error satisfies the builtin error interface
func (e ClearResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClearResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClearResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClearResponseValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRequestMultiError, or
// nil if none found.
func (m *DeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetImageId()) < 1 {
		err := DeleteRequestValidationError{
			field:  "ImageId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteRequest_ImageId_Pattern.MatchString(m.GetImageId()) {
		err := DeleteRequestValidationError{
			field:  "ImageId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRequestMultiError(errors)
	}

	return nil
}

// DeleteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestMultiError) AllErrors() []error { return m }

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

var _DeleteRequest_ImageId_Pattern = regexp.MustCompile("^[a-zA-Z0-9-]+$")

// Validate checks the field values on DeleteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteResponseMultiError,
// or nil if none found.
func (m *DeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteResponseMultiError(errors)
	}

	return nil
}

// DeleteResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResponseMultiError) AllErrors() []error { return m }

// DeleteResponseValidationError is the validation error returned by
// DeleteResponse.Validate if the designated constraints aren't met.
type DeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponseValidationError) ErrorName() string { return "DeleteResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponseValidationError{}

// Validate checks the field values on BatchDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchDeleteRequestMultiError, or nil if none found.
func (m *BatchDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetImageIds()); l < 1 || l > 10 {
		err := BatchDeleteRequestValidationError{
			field:  "ImageIds",
			reason: "value must contain between 1 and 10 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetImageIds() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) < 1 {
			err := BatchDeleteRequestValidationError{
				field:  fmt.Sprintf("ImageIds[%v]", idx),
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_BatchDeleteRequest_ImageIds_Pattern.MatchString(item) {
			err := BatchDeleteRequestValidationError{
				field:  fmt.Sprintf("ImageIds[%v]", idx),
				reason: "value does not match regex pattern \"^[a-zA-Z0-9-]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return BatchDeleteRequestMultiError(errors)
	}

	return nil
}

// BatchDeleteRequestMultiError is an error wrapping multiple validation errors
// returned by BatchDeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type BatchDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchDeleteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchDeleteRequestMultiError) AllErrors() []error { return m }

// BatchDeleteRequestValidationError is the validation error returned by
// BatchDeleteRequest.Validate if the designated constraints aren't met.
type BatchDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchDeleteRequestValidationError) ErrorName() string {
	return "BatchDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchDeleteRequestValidationError{}

var _BatchDeleteRequest_ImageIds_Pattern = regexp.MustCompile("^[a-zA-Z0-9-]+$")

// Validate checks the field values on BatchDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchDeleteResponseMultiError, or nil if none found.
func (m *BatchDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return BatchDeleteResponseMultiError(errors)
	}

	return nil
}

// BatchDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by BatchDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type BatchDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchDeleteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchDeleteResponseMultiError) AllErrors() []error { return m }

// BatchDeleteResponseValidationError is the validation error returned by
// BatchDeleteResponse.Validate if the designated constraints aren't met.
type BatchDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchDeleteResponseValidationError) ErrorName() string {
	return "BatchDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchDeleteResponseValidationError{}

// Validate checks the field values on ImageRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageRequestMultiError, or
// nil if none found.
func (m *ImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ImageRequest_Id_Pattern.MatchString(m.GetId()) {
		err := ImageRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVariant()) < 1 {
		err := ImageRequestValidationError{
			field:  "Variant",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ImageRequestMultiError(errors)
	}

	return nil
}

// ImageRequestMultiError is an error wrapping multiple validation errors
// returned by ImageRequest.ValidateAll() if the designated constraints aren't met.
type ImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageRequestMultiError) AllErrors() []error { return m }

// ImageRequestValidationError is the validation error returned by
// ImageRequest.Validate if the designated constraints aren't met.
type ImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageRequestValidationError) ErrorName() string { return "ImageRequestValidationError" }

// Error satisfies the builtin error interface
func (e ImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageRequestValidationError{}

var _ImageRequest_Id_Pattern = regexp.MustCompile("^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")

// Validate checks the field values on ImageResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageResponseMultiError, or
// nil if none found.
func (m *ImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uri

	if len(errors) > 0 {
		return ImageResponseMultiError(errors)
	}

	return nil
}

// ImageResponseMultiError is an error wrapping multiple validation errors
// returned by ImageResponse.ValidateAll() if the designated constraints
// aren't met.
type ImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageResponseMultiError) AllErrors() []error { return m }

// ImageResponseValidationError is the validation error returned by
// ImageResponse.Validate if the designated constraints aren't met.
type ImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageResponseValidationError) ErrorName() string { return "ImageResponseValidationError" }

// Error satisfies the builtin error interface
func (e ImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageResponseValidationError{}
